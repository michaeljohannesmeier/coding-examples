shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
library(plotly)
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PAS-Final')
shiny::runApp('C:/Users/Michael/Desktop/PASv31')
a<- 5
a
a<- (50, 55, 48, 60)
a<- c(50, 55, 48, 60)
a
b<-c(1000, 1200, 1230, 1400)
b
cbind(a,b)
a[1,1]
a[1]
k<-cbind(a,b)
k
k[1,1]
k[1,2]
install.packages("ISLR")
library(ISLR)
Smarket
nrow(Smarket)
head(Smarket)
plot(Smarket[,1])
plot(Smarket[,2])
plot(Smarket[,2], type= "l")
plot(Smarket[1:100,2], type= "l")
plot(Smarket[1:100,8], type= "l")
plot(Smarket[1:100,2], type= "l")
plot(Smarket[1:100,8], type= "l")
plot(Smarket[1:100,7], type= "l")
attach(Smarket)
plot(Volume)
plot(Smarket[1:100,9], type= "l")
plot(Smarket[1:100,8], type= "l")
plot(Smarket[1:100,7], type= "l")
plot(Smarket[,7], type= "l")
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data = Smarket, family=binomial)
summary(glm.fit)
train=(Year<2005)
train
Smarket.2005=Smarket[!train,]
Smarket.2005
nrow(Smarket.2005)
Direction.2005=Direction[!train]
Direction.2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data = Smarket, family=binomial, subset=train)
glm.probs=predict(glm.fit, Smarket.2005, type = "response")
glm.pred=rep("Down",252)
glm.pred
glm.pred[glm.probs>0.5]= "Up"
table(glm.pred, Direction.2005)
library(MASS)
lda.fit=da(Direction~Lag1+Lag2, data=Smarket, subset=train)
lda.fit=lda(Direction~Lag1+Lag2, data=Smarket, subset=train)
lda.fit
head(Smarket)
h<-Smarket(Direction==Up)
h<-Smarket[Direction==Up]
h<-Smarket[Direction=="Up"]
train
test=(Direction=="Up")
test
ups<-Smarket[test,]
ups
mean(ups[,8])
mean(ups[,2])
ups[,2]
head(ups)
mean(ups[,8])
downs<-Smarket[!test,]
mean(down[,8])
mean(downs[,8])
hist(ups)
plot(ups)
hist(downs[,8])
hist(ups[,8])
hist(Smarkt[,8])
hist(Smarkts[,8])
hist(Smarket[,8])
plot(lda.fit)
ref<-Text.Ref( "A2:B4" );
set.Cell( "B1", 100 )
install.packages(c("rscproxy","rcom"),repos="http://rcom.univie.ac.at/download",lib=.Library)
installstatconnDCOM()
library(rcom)
comRegisterRegistry()
download.file(url="http://rcom.univie.ac.at/download/RExcel.distro/RExcelInst.latest.exe",mode="wb",destfile="Rexcel.exe")
system("Rexcel.exe")
install.packages(c("Rcmdr","RcmdrPlugin.HH"),lib=.Library,dep=TRUE)
library(Rcmdr)
install.packages(c("rscproxy","rcom"),repos="http://rcom.univie.ac.at/download",lib=.Library)
installstatconnDCOM()
library(rcom)
comRegisterRegistry()
download.file(url="http://rcom.univie.ac.at/download/RExcel.distro/RExcelInst.latest.exe",mode="wb",destfile="Rexcel.exe")
system("Rexcel.exe")
install.packages(c("Rcmdr","RcmdrPlugin.HH"),lib=.Library,dep=TRUE)
library(Rcmdr)
install.packages(c("Rcmdr", "RcmdrPlugin.HH"), lib = .Library,
install.packages(c("rscproxy","rcom"),repos="http://rcom.univie.ac.at/download",lib=.Library)
installstatconnDCOM()
install.packages("rcom")
installstatconnDCOM()
installstatconnDCOM
installstatconnDCOM()
install.packages("RDCOMClient", repos = "http://www.omegahat.org/R", type = "source")
options(install.packages.check.source = "no")
install.packages(c("rscproxy","rcom"),repos="http://www.autstat.com/download",lib=.Library,type="win.binary")
install.packages("c:\\path_to_file\\ExcelsiR_0.6.tar.gz", repos=NULL, type="source")
install.packages("c:\\C:\Program Files (x86)\Excelsi-R\\ExcelsiR_0.6.tar.gz", repos=NULL, type="source")
install.packages("c:\\Program Files (x86)\Excelsi-R\\ExcelsiR_0.6.tar.gz", repos=NULL, type="source")
install.packages("c:\Program Files (x86)\Excelsi-R\ExcelsiR_0.6.tar.gz", repos=NULL, type="source")
install.packages("c:/Program Files (x86)/Excelsi-R/ExcelsiR_0.6.tar.gz", repos=NULL, type="source")
install.packages("c:\\Program Files (x86)\\Excelsi-R\\ExcelsiR_0.6.tar.gz", repos=NULL, type="source")
install.packages("c:\\Program Files (x86)\\Excelsi-R\\lib\\ExcelsiR_0.6.tar.gz", repos=NULL, type="source")
install.packages("c:\\Program Files (x86)\\Excelsi-R\\lib\\ExcelsiR.dll", repos=NULL, type="source")
install.packages("c:\\Program Files (x86)\\Excelsi-R\\lib\\Excelsi-R.dll", repos=NULL, type="source")
install.packages("C:/Users/Michael/Desktop/rscproxy_2.0-5.tar.gz", repos = NULL, type = "source")
internal = true
install.packages("C:/Users/Michael/Desktop/rscproxy_2.0-5.tar.gz", repos = NULL, type = "win.binary")
install.packages("C:/Users/Michael/Desktop/rscproxy_2.0-5.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Michael/Desktop/rscproxy_2.0-5.tar.gz", repos = NULL, type = "win.binary")
install.packages(c("rscproxy","rcom"),repos="http://www.autstat.com/download",type="win.binary")
library(rcom)
installstatconnDCOM()
library(rcom)
comRegisterRegistry()
install.packages(c("Rcmdr","RcmdrPlugin.HH"),dep=TRUE)
library(Rcmdr)
library(rcom)
comRegisterRegistry()
Rcmdr
library(Rcmdr)
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
comRegisterRegistry()
library(rcom)
installstatconnDCOM()
library(rcom)
library(rscproxy)
comRegisterRegistry()
ljlj()
library(htmltools)
library(rcom)
library(Rcmdr)
my.date = as.date("1970/1/1")
my.date = as.Date("1970/1/1")
my.date
class(my.date)
my.date
weekdays(my.date)
month(my.date)
months(my.date)
quarter(my.date)
quarters(my.date)
my.date1 = as.Date("1980-01-01")
diff.date = my.date1 -  my.date
diff.date
myDateTimeStr = "2013-12-19 10:17:07"
myPOSIXct = as.POSIXct(myDateTimeStr)
myPOSIXct
myDateTimeStr = "2013-12-19"
myPOSIXct = as.POSIXct(myDateTimeStr)
myPOSIXct
Sys.timezone()
attributes(myPOSIXct)
server <- function(input, output, session) {
source("Server/sidebar.R", local = TRUE)
source('Server/1.0.server_dataimport.R', local=TRUE)
}
setwd("C:/Users/Michael/Desktop/NN R Shiny Dash")
server <- function(input, output, session) {
source("Server/sidebar.R", local = TRUE)
source('Server/1.0.server_dataimport.R', local=TRUE)
}
server <- function(input, output, session) {
source("Server/sidebar.R", local = TRUE)
source('Server/1.0.server_dataimport.R', local=TRUE)
}
server <- function(input, output, session) {
source("Server/sidebar.R", local = TRUE)
source('Server/1.0.server_dataimport.R', local=TRUE)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help("menuItem")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
isolate(daten.under$base <- file.data)
daten.under$base[1]
daten.under$base[1] = as.POSIXct(daten.under$base[1])
class(daten.under$base[1])
class(daten.under$base[[1]])
daten.under$base[1] = as.POSIXct(daten.under$base[[1]])
daten.under$base
str(daten.under$base[1])
shiny::runApp()
shiny::runApp()
isolate(daten.under$base <- file.data)
daten.under$base[1] = as.POSIXct(daten.under$base[[1]])
daten.under$base[1]
shiny::runApp()
daten.under$base[1] = as.POSIXct(daten.under$base[[1]])
daten.under$base[1]
isolate(daten.under$base <- file.data)
daten.under$base[1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
file.data<- loadWorkbook(infile$datapath)
install.packages("XLConnect")
shiny::runApp()
library(XLConnect)
install.packages("XLConnectJars")
library(XLConnect)
library(XLConnectJars)
install.packages("rJava")
library(XLConnectJars)
library(XLConnect)
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(rJava)
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("rJava")
library(rJava)
.libpaths()
.libPaths(choose.dir())
.libPaths(choose.dir())
.libPaths()
.libPaths("C:/Users/Michael/Documents/R/win-library/3.3" )
.libPaths()
install.packages("rJava")
library(rJava)
Sys.getenv("JAVA_HOME")
jre1.8.0_101
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_101')
library(rJava)
library(XLConnect)
library(XLConnectJars)
shiny::runApp()
file.data<- loadWorkbook(infile$datapath)
file.data<- loadWorkbook(inFile$datapath)
file.data
inFile$datapath
shiny::runApp()
inFile$datapath
file.data<- loadWorkbook(inFile$datapath)
test<-loadWorkbook(choose.files())
test
help(readworksh)
install.packages(xlconnect)
install.packages("XLConnect")
install.packages("XLConnect")
help(readworksheet)
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
help("readWorksheet")
shiny::runApp()
shiny::runApp()
library(shinydashboard)
shiny::runApp()
wb<- loadWorkbook(inFile$datapath)
file.data <-  readWorksheet(wb,
sheet = "aaa2")
file.data
str(file.data)
shiny::runApp()
file.data <-  readWorksheet(wb)
shiny::runApp()
file.data <-  readWorksheet(wb, sheet = 1)
file.data
shiny::runApp()
shiny::runApp()
inFile <- input$file1
shiny::runApp()
inFile <- input$file1
inFile
inFile$type
shiny::runApp()
inFile
inFile
inFile$name
shiny::runApp()
shiny::runApp()
shiny::runApp()
strtrim(c("abcdef", "abcdef", "abcdef"), c(1,5,10))
shiny::runApp()
daten.under$base[1] = as.POSIXct(daten.under$base[[1]])
names(daten.under$base)
seq(1,1)
seq(1,2)
rep(1,3)
lenght(names(daten.under$base))
length(names(daten.under$base))
strtrim(names(daten.under$base)), rep(10,length(names(daten.under$base)))
strtrim(names(daten.under$base), rep(10,length(names(daten.under$base))))
strtrim(names(daten.under$base), rep(15,length(names(daten.under$base))))
names(daten.under$base) = strtrim(names(daten.under$base), rep(15,length(names(daten.under$base))))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
reg.data <- daten.under$base[ ,sapply(daten.under$base, is.numeric)]
reg.data
str(daten.under$base)
shiny::runApp()
setwd("C:/Users/Michael/Desktop/PAS-Final")
shiny::runApp()
library(plotly)
shiny::runApp()
shiny::runApp('C:/Users/Michael/Desktop/NN R Shiny Dash')
shiny::runApp('C:/Users/Michael/Desktop/NN R Shiny Dash')
setwd("C:/Users/Michael/Desktop/NN R Shiny Dash")
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinydashboard)
shiny::runApp()
library(htmltools)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(ggplot2)
library(XLConnect)
shiny::runApp()
shiny::runApp()
library(shinyBS)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(forecast)
library(zoo)
library(ISwR)
library(readxl)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(QuantPsyc)
library(MASS)
library(lubridate)
library(fitdistrplus)
library(metricsgraphics)
library(ggvis)
library(readxl)
library(forecast)
library(ISwR)
library(lubridate)
library(fmsb)
library(forecast)
library(d3heatmap)
library(DAAG)
library(metricsgraphics)
library(timeSeries)
library(fitdistrplus)
shiny::runApp()
library(vars)
library(xts)
library(zoo)
library(plotly)
readxl
library(readxl)
library(fmsb)
library(d3heatmap)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("C:/Users/Michael/Desktop/PAS-Final")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
RMSE()
backtest$dyevents
is.null(RMSE())
print(outgraph)
outgraph <- dygraph(RMSE(),
main = "Root Mean Squared Error") %>%
dyAxis("y", label = "RMSE") %>%
dyLegend(width = 600) %>%
dyRangeSelector()
print(outgraph)
output$graph.rmse
shiny::runApp()
shiny::runApp()
